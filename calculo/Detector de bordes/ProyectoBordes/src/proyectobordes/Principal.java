package proyectobordes;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
public class Principal extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
	//VARIABLES GLOBALES
    CalculaUmbral um;
    //imagenes
     BufferedImage Nueva_Imagen,imagen;
    //indices,colores,ancho,alto de la imagen
     int i,j,r,g,b,w,h;
     //arreglos por canal para operaciones
     int[][] rojo,verde,azul,HorizontalR,VerticalR,HorizontalG,VerticalG,HorizontalB,VerticalB;
int a[];    
//leer color
     Color colorAuxiliar;
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * @param a
     * @param b
     * @return 
     */
   public int Mayor(int a,int b){
       int mat;
   if(a>b){
       mat=a;
   }
   else{
   mat=b;
   }
   
   return mat;
   }
   
    public int Verifica(int a,int b){
       int mat;
   if(a>b){
       mat=b;
   }
   else{
   mat=a;
   }
   
   return mat;
   }
   
    public void Inicializa(){
          
        Nueva_Imagen=new BufferedImage(imagen.getWidth(),imagen.getHeight(),BufferedImage.TYPE_INT_RGB) ;
    h=imagen.getHeight();
    w=imagen.getWidth();
rojo=new int[w][h];
verde=new int[w][h];
azul=new int[w][h];
HorizontalR=new int[w][h];
HorizontalG=new int[w][h];
HorizontalB=new int[w][h];
VerticalR=new int[w][h];
VerticalG=new int[w][h];
VerticalB=new int[w][h];
a=new int[w*h];
     for( i=0;i<imagen.getWidth();i++){
        for(j=0;j<imagen.getHeight();j++){
                colorAuxiliar=new Color(imagen.getRGB(i, j));
               
                r = colorAuxiliar.getRed();
                g= colorAuxiliar.getGreen();
                b = colorAuxiliar.getBlue();
               
              rojo[i][j]=r; 
              verde[i][j]=g; 
              azul[i][j]=b; 
            
            }
        }//fin for i
 
    }//fin metodo
    
    //Operacion Horizontal
    public void OperacionHorizontal(){
   // ∆P’i = | P[i+ 1,j] – P[i,j] |
     for( i=0;i<imagen.getWidth()-1;i++){
        for(j=0;j<imagen.getHeight();j++){
             HorizontalR[i][j]=Math.abs((rojo[i+1][j]-rojo[i][j]));
             HorizontalG[i][j]=Math.abs((verde[i+1][j]-verde[i][j]));
            HorizontalB[i][j]=Math.abs((azul[i+1][j]-azul[i][j]));
              Nueva_Imagen.setRGB(i, j,new Color(HorizontalR[i][j],HorizontalG[i][j],HorizontalB[i][j]).getRGB());
            }
        }
    
    }//fin metodo
    
    //Operacion Vertical
     public void OperacionVertical(){
   // ∆P’i = | P[i,j+1] – P[i,j] |
     for( i=0;i<imagen.getWidth();i++){
        for(j=0;j<imagen.getHeight()-1;j++){
             VerticalR[i][j]=Math.abs((rojo[i][j+1]-rojo[i][j]));
             VerticalG[i][j]=Math.abs((verde[i][j+1]-verde[i][j]));
             VerticalB[i][j]=Math.abs((azul[i][j+1]-azul[i][j]));
              Nueva_Imagen.setRGB(i, j,new Color(VerticalR[i][j],VerticalG[i][j],VerticalB[i][j]).getRGB());
            }
        }
    
    }//fin metodo
    
     
//Operador mixto
     public void OperacionMixto(){
   //∆P’ = max{∆P’i, ∆P’j}
        
         OperacionVertical();
         OperacionHorizontal();
for( i=0;i<imagen.getWidth()-1;i++){
        for(j=0;j<imagen.getHeight();j++){
            r=Mayor(HorizontalR[i][j],VerticalR[i][j]);
            g=Mayor(HorizontalG[i][j],VerticalG[i][j]);
            b=Mayor(HorizontalB[i][j],VerticalB[i][j]);
              Nueva_Imagen.setRGB(i, j,new Color(r,g,b).getRGB());
            }
        }
     }//fin metodo
     public int calculagradiente(int x,int y){
     double a,b,c;
     a=x*x;
     b=y*y;
     c=.5*Math.sqrt(a+b);
     return Math.round((float)(c));
     }
     
      public int calculagradiente2(int x,int y){
     double a,b,c;
     a=x*x;
     b=y*y;
     c=Math.sqrt(a+b);
    // System.out.println("valor de gradiente "+c);
     return Math.round((float)(c));
     
     }
     //operacion gradiente
     public void OperacionGradiente1(){
     OperacionVertical();
         OperacionHorizontal();
for( i=0;i<imagen.getWidth()-1;i++){
        for(j=0;j<imagen.getHeight();j++){
            r=calculagradiente(HorizontalR[i][j],VerticalR[i][j]);
            g=calculagradiente(HorizontalG[i][j],VerticalG[i][j]);
            b=calculagradiente(HorizontalB[i][j],VerticalB[i][j]);
              Nueva_Imagen.setRGB(i, j,new Color(r,g,b).getRGB());
            }
        }
     }//fin metodo gradiente
     
       //operacion inverso - Gradiente 2
     public void OperacionGradiente2(){
     OperacionVertical();
         OperacionHorizontal();
for( i=0;i<imagen.getWidth()-1;i++){
        for(j=0;j<imagen.getHeight();j++){
            r=calculagradiente2(HorizontalR[i][j],VerticalR[i][j]);
            g=calculagradiente2(HorizontalG[i][j],VerticalG[i][j]);
            b=calculagradiente2(HorizontalB[i][j],VerticalB[i][j]);
           
           r=Verifica(r,255);
            g=Verifica(g,255);
            b=Verifica(b,255);
            Nueva_Imagen.setRGB(i, j, new Color(255-r,255-g,255-b).getRGB());
            }
        }
     }//fin metodo gradiente
     public void OperacionGradienteAprox(){
        // max{|P[i+1, j +1]−P[i, j]|+|P[i, j +1]−P[i+1, j]|,q−1}
   for( i=0;i<imagen.getWidth()-1;i++){
        for(j=0;j<imagen.getHeight()-1;j++){
             HorizontalR[i][j]=Math.abs((rojo[i+1][j+1]-rojo[i][j]));
             HorizontalG[i][j]=Math.abs((verde[i+1][j+1]-verde[i][j]));
            HorizontalB[i][j]=Math.abs((azul[i+1][j+1]-azul[i][j]));
              
            }
        }
   for( i=0;i<imagen.getWidth()-1;i++){
        for(j=0;j<imagen.getHeight()-1;j++){
             VerticalR[i][j]=Math.abs((rojo[i][j+1]-rojo[i+1][j]));
             VerticalG[i][j]=Math.abs((verde[i][j+1]-verde[i+1][j]));
             VerticalB[i][j]=Math.abs((azul[i][j+1]-azul[i+1][j]));
            }
        }
         
for( i=0;i<imagen.getWidth();i++){
        for(j=0;j<imagen.getHeight();j++){
           
           r=Verifica(VerticalR[i][j]+HorizontalR[i][j],255);
            g=Verifica(VerticalG[i][j]+HorizontalG[i][j],255);
             b=Verifica(VerticalB[i][j]+HorizontalB[i][j],255);
              Nueva_Imagen.setRGB(i, j,new Color(r,g,b).getRGB());
            }
        }
     }//fin metodo gradiente aprox
    
    public void Mostrar(){
    jLabelImagenResultado.setIcon(new ImageIcon(Nueva_Imagen));
    }
    
    public int ConvierteGris(Color color){
        int mediaColor; 
          mediaColor=(int)(.3*(color.getRed())+.59*(color.getGreen())+.11*(color.getBlue()));
          return mediaColor;
    }//fin gris
    
      public int[] histograma(){
        int histogramaReturn[]=new int[256];
      
        //Recorremos la imagen
            for(  i = 0; i <Nueva_Imagen.getWidth(); i++ ){
            for(  j = 0; j < Nueva_Imagen.getHeight(); j++ ){
                //Obtenemos color del píxel actual
                colorAuxiliar=new Color(Nueva_Imagen.getRGB(i, j));
                histogramaReturn[ConvierteGris(colorAuxiliar)]+=1;
            }
        }
        return histogramaReturn;
    }
     
      
       public void Umbralizacion(int umbral){
         int aux;
     for( i=1;i<Nueva_Imagen.getWidth();i++){
        for(j=1;j<Nueva_Imagen.getHeight();j++){
           colorAuxiliar=new Color(Nueva_Imagen.getRGB(i, j));
               aux=ConvierteGris(colorAuxiliar);
               if(aux<umbral){
               
              Nueva_Imagen.setRGB(i, j,new Color(0,0,0).getRGB());
               }
               else{
               Nueva_Imagen.setRGB(i, j,new Color(255,255,255).getRGB());
               }
            }
        }
     }//fin binarizacion
       
    
    //Aqui empieza interfaz grafica
    private void initComponents() {

        jLabeltitulo1 = new javax.swing.JLabel();
        jLabeltitulo2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabelImagenOriginal = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLabelImagenResultado = new javax.swing.JLabel();
        jButtonBinarizacion = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuHorizontal = new javax.swing.JMenuItem();
        jMenuVertical = new javax.swing.JMenuItem();
        jMenuMixto = new javax.swing.JMenuItem();
        jMenuGradiente1 = new javax.swing.JMenuItem();
        jMenuGradiente2 = new javax.swing.JMenuItem();
        jMenuGradienteAprox = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Detector de Bordes");

        jLabeltitulo1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabeltitulo1.setForeground(new java.awt.Color(204, 0, 0));
        jLabeltitulo1.setText("Imagen Original");

        jLabeltitulo2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabeltitulo2.setForeground(new java.awt.Color(204, 0, 0));
        jLabeltitulo2.setText("Imagen Final");

        jLabelImagenOriginal.setBackground(new java.awt.Color(255, 0, 0));
        jLabelImagenOriginal.setForeground(new java.awt.Color(255, 0, 102));
        jScrollPane2.setViewportView(jLabelImagenOriginal);

        jLabelImagenResultado.setForeground(new java.awt.Color(0, 51, 255));
        jScrollPane3.setViewportView(jLabelImagenResultado);

        jButtonBinarizacion.setText("Umbral");
        jButtonBinarizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBinarizacionActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Abrir Imagen");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Metodo");

        jMenuHorizontal.setText("Horizontal");
        jMenuHorizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHorizontalActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuHorizontal);

        jMenuVertical.setText("Vertical");
        jMenuVertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuVerticalActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuVertical);

        jMenuMixto.setText("Mixto");
        jMenuMixto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuMixtoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuMixto);

        jMenuGradiente1.setText("Gradiente");
        jMenuGradiente1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuGradiente1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuGradiente1);

        jMenuGradiente2.setText("Invertir");
        jMenuGradiente2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuGradiente2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuGradiente2);

        jMenuGradienteAprox.setText("Gradiente Aprox");
        jMenuGradienteAprox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuGradienteAproxActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuGradienteAprox);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonBinarizacion)
                .addGap(248, 248, 248))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabeltitulo1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 253, Short.MAX_VALUE)
                .addComponent(jLabeltitulo2)
                .addGap(111, 111, 111))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabeltitulo1)
                    .addComponent(jLabeltitulo2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 298, Short.MAX_VALUE)
                .addComponent(jButtonBinarizacion)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(42, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                        .addComponent(jScrollPane2))
                    .addGap(46, 46, 46)))
        );

        pack();
    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        
         //se crea un nuevo cuadro de dialogo para seleccionar imagen
        JFileChooser selector=new JFileChooser();
        //Le damos un titulo
        selector.setDialogTitle("Seleccione una imagen");
        //Filtramos los tipos de archivos
        FileNameExtensionFilter filtroImagen = new FileNameExtensionFilter("JPG &  BMP", "jpg", "bmp");
        selector.setFileFilter(filtroImagen);
        //Abrimos el cuadro de diálog
        int flag=selector.showOpenDialog(null);
        //Comprobamos que pulse en aceptar
        if(flag==JFileChooser.APPROVE_OPTION){
            try {
                //Devuelve el fichero seleccionado
                File imagenSeleccionada=selector.getSelectedFile();
                //Asignamos a la variable bmp la imagen leida
               imagen= ImageIO.read(imagenSeleccionada);
            } catch (IOException e) {
            }
         
                 jLabelImagenOriginal.setIcon(new ImageIcon(imagen));
                  
              
    
        Inicializa();  
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButtonBinarizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBinarizacionActionPerformed
        // TODO add your handling code here:
         int Recibegris[]=histograma();
         CalculaUmbral cal=new CalculaUmbral();
         int a=cal.CalcularUmbral(Recibegris);
         Umbralizacion(a);    
      Mostrar();
    }//GEN-LAST:event_jButtonBinarizacionActionPerformed

    private void jMenuHorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHorizontalActionPerformed
        // TODO add your handling code here:
        OperacionHorizontal();
        Mostrar();
    }//GEN-LAST:event_jMenuHorizontalActionPerformed

    private void jMenuVerticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuVerticalActionPerformed
        // TODO add your handling code here:
        OperacionVertical();
        Mostrar();
    }//GEN-LAST:event_jMenuVerticalActionPerformed

    private void jMenuMixtoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuMixtoActionPerformed
        // TODO add your handling code here:
               OperacionMixto();
        Mostrar();
    }//GEN-LAST:event_jMenuMixtoActionPerformed

    private void jMenuGradiente1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuGradiente1ActionPerformed
        // TODO add your handling code here:
        OperacionGradiente1();
        Mostrar();
    }//GEN-LAST:event_jMenuGradiente1ActionPerformed

    private void jMenuGradiente2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuGradiente2ActionPerformed
        OperacionGradiente2();
        Mostrar();
    }//GEN-LAST:event_jMenuGradiente2ActionPerformed

    private void jMenuGradienteAproxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuGradienteAproxActionPerformed
        OperacionGradienteAprox();
        Mostrar();
    }//GEN-LAST:event_jMenuGradienteAproxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBinarizacion;
    private javax.swing.JLabel jLabelImagenOriginal;
    private javax.swing.JLabel jLabelImagenResultado;
    private javax.swing.JLabel jLabeltitulo1;
    private javax.swing.JLabel jLabeltitulo2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuGradiente1;
    private javax.swing.JMenuItem jMenuGradiente2;
    private javax.swing.JMenuItem jMenuGradienteAprox;
    private javax.swing.JMenuItem jMenuHorizontal;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuMixto;
    private javax.swing.JMenuItem jMenuVertical;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
